import express from "express";
import axios from "axios";
import cors from "cors";

const app = express();
const PORT = process.env.PORT || 3000;

// ‚úÖ Channel list
const channels = {
  tsports: {
    manifest: "https://cdn.bdixtv24.vip/tsports/tracks-v1a1/mono.ts.m3u8",
    base: "https://cdn.bdixtv24.vip/tsports/tracks-v1a1/"
  },
  boishakhi: {
    manifest: "https://boishakhi.sonarbanglatv.com/boishakhi/boishakhitv/index.m3u8",
    base: "https://boishakhi.sonarbanglatv.com/boishakhi/boishakhitv/"
  }
};

// --- CORS ‡¶è‡¶¨‡¶Ç Origin Validation ---

// ‚úÖ Step 1: Request Origin Validation (GitHub Pages)
// ‡¶è‡¶á ‡¶Æ‡¶ø‡¶°‡¶≤‡¶ì‡¶Ø‡¶º‡ßç‡¶Ø‡¶æ‡¶∞‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ GitHub Pages ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶´‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§‡•§
app.use((req, res, next) => {
  const allowedOrigin = "https://ryvoxtb.github.io";
  // Origin ‡¶¨‡¶æ Referer ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
  const origin = req.headers.origin || req.headers.referer || "";

  // Debug Log
  console.log("üîç Request Origin/Referer:", origin || "None");

  // ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡¶¶‡¶ø:
  // 1. ‡¶ï‡ßã‡¶®‡ßã Origin/Referer ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá (‡¶Ø‡¶æ HLS ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï)
  // 2. ‡¶Ö‡¶•‡¶¨‡¶æ Origin/Referer ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ GitHub Pages ‡¶è‡¶∞ URL ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º
  if (!origin || origin.startsWith(allowedOrigin)) {
    next();
  } else {
    console.log("‚ùå Access denied for origin:", origin);
    res.status(403).send("Access denied: Only allowed from your website.");
  }
});

// ‚úÖ Step 2: Dynamic CORS setup for Browser
// ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø CORS ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá‡•§
app.use(cors({
  origin: (origin, callback) => {
    const allowedOrigin = "https://ryvoxtb.github.io";
    if (!origin || origin.startsWith(allowedOrigin)) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  methods: ["GET"],
}));

// --- Proxy Routes ---

// ‚úÖ Manifest proxy route: .m3u8 ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
app.get("/live/:channel", async (req, res) => {
  const { channel } = req.params;
  const info = channels[channel];

  if (!info) return res.status(404).send("Channel not found.");

  try {
    console.log(`üìú Loading manifest for ${channel}`);
    const manifestResponse = await axios.get(info.manifest);
    let manifestContent = manifestResponse.data;

    // HLS Manifest URL rewrite
    const proxySegmentBase = `/segment/${channel}?file=`;
    
    // ‡¶∏‡ßá‡¶ó‡¶Æ‡ßá‡¶®‡ßç‡¶ü URL ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∏‡¶ø ‡¶∞‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    manifestContent = manifestContent.replace(
      /(#EXTINF:.*?\n)([^#\n].*\.(ts|m4s|aac|mp4))/g,
      (match, extinf, seg) => `${extinf}${proxySegmentBase}${encodeURIComponent(seg)}`
    );

    res.setHeader("Content-Type", "application/vnd.apple.mpegurl");
    res.send(manifestContent);
  } catch (err) {
    console.error("‚ùå Error loading manifest:", err.message);
    res.status(500).send("Error loading manifest.");
  }
});

// ‚úÖ Segment proxy route: .ts/m4s ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
// üí° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: User-Agent ‡¶è‡¶¨‡¶Ç Referer ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
app.get("/segment/:channel", async (req, res) => {
  const { channel } = req.params;
  const info = channels[channel];

  if (!info) return res.status(404).send("Channel not found.");

  const file = req.query.file;
  if (!file) return res.status(400).send("Missing file parameter.");

  try {
    console.log(`üéûÔ∏è Streaming segment for ${channel}: ${file}`);
    
    // üí° Upstream CDN Access Control ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®: ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó
    const headers = {
      // ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ Chrome ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ User-Agent
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36", 
      // ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡¶ü‡¶ø‡¶∞ ‡¶Æ‡ßÇ‡¶≤ Base URL-‡¶ï‡ßá Referer ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶® 
      "Referer": info.base 
    };
    
    const response = await axios({
      method: "get",
      url: info.base + file,
      responseType: "stream",
      headers: headers // <-- ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    });

    res.setHeader("Content-Type", "video/mp2t");
    response.data.pipe(res);
  } catch (err) {
    console.error("‚ùå Segment load error (Upstream Server):", err.message);
    res.status(500).send("Segment load error. Check server logs for CDN error.");
  }
});

// ‚úÖ Root page (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
app.get("/", (req, res) => {
  res.send(`
    <h2>üé• RyvoxTB Secure Live TV Server</h2>
    <p>Server is running and secured for https://ryvoxtb.github.io</p>
  `);
});

// ‚úÖ Server start
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});
